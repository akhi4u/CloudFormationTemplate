Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "App Environment Configuration"
        Parameters:
          - ENVIRONMENT
          - APPVERSION
          - KEYPAIR
          - VPCCIDR
          - SUBNET
          - MINSIZE
          - MAXSIZE
          - DESIREDCAPACITY
          - ACMCERTIFICATE
Parameters:
  APPVERSION:
    Type: String
    Description: Application Version to Deploy
    Default: "1"
  ENVIRONMENT:
    Type: String
    Description: Type of environment to provision
    Default: DEV
    AllowedValues:
      - DEV
      - TEST
      - PROD
      - PRESALES
  KEYPAIR:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select a KeyPair
    ConstraintDescription : Can contain only ASCII characters
  VPCCIDR:
    Type: String
    Description: Use /16 CIDR
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
    Default: 192.168.0.0/16
  SUBNET:
    Type: String
    Description: Use CIDR greater than /16
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/22
    Default: 192.168.1.0/22
  MINSIZE:
    Type: String
    Description: Minimum number of app servers
    Default: "1"
  MAXSIZE:
    Type: String
    Description: Maximum number of app servers
    Default: "2"
  DESIREDCAPACITY:
    Type: String
    Description: Nominal Size of APP Env
    Default: "1"
  ACMCERTIFICATE:
    AllowedPattern: ^$|(arn:aws:acm:)([a-z0-9/:-])*([a-z0-9])$
    Description: 'The AWS Certification Manager certificate ARN for the ELB. This certificate should be created in the region you wish to run the ELB'
    Type: String
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX" : "ami-c481fad3" # AMALINUX SEP 2016
    us-east-2:
      "AMALINUX" : "ami-71ca9114" # AMALINUX SEP 2016
    us-west-1:
      "AMALINUX" : "ami-de347abe" # AMALINUX SEP 2016
    us-west-2:
      "AMALINUX" : "ami-b04e92d0" # AMALINUX SEP 2016
    ca-central-1:
      "AMALINUX" : "ami-eb20928f" # AMALINUX SEP 2016 v01
    eu-west-1:
      "AMALINUX" : "ami-d41d58a7" # AMALINUX SEP 2016
    eu-central-1:
      "AMALINUX" : "ami-0044b96f" # AMALINUX SEP 2016
    eu-west-2:
      "AMALINUX" : "ami-bfe0eadb" # AMALINUX SEP 2016 v01
    ap-southeast-1:
      "AMALINUX" : "ami-7243e611" # AMALINUX SEP 2016
    ap-southeast-2:
      "AMALINUX" : "ami-55d4e436" # AMALINUX SEP 2016
    ap-northeast-2:
      "AMALINUX" : "ami-a04297ce" # AMALINUX SEP 2016
    ap-northeast-1:
      "AMALINUX" : "ami-1a15c77b" # AMALINUX SEP 2016
    ap-south-1:
      "AMALINUX" : "ami-cacbbea5" # AMALINUX SEP 2016
    sa-east-1:
      "AMALINUX" : "ami-b777e4db" # AMALINUX SEP 2016
  InstanceSize:
    DEV:
      "EC2" : "t2.micro"
    TEST:
      "EC2" : "t2.micro"
    PROD:
      "EC2" : "t2.small"
    PRESALES:
      "EC2" : "t2.micro"
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      VpcId: !Ref VPC
      CidrBlock: !Ref SUBNET
      MapPublicIpOnLaunch: true
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  SubnetRouteTableAssociation:
    DependsOn: Subnet
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet
  AutoScalingGroup:
    CreationPolicy:
      ResourceSignal:
        Count: !Ref DESIREDCAPACITY
        Timeout: "PT5M"
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      Cooldown: "300"
      DesiredCapacity: !Ref DESIREDCAPACITY
      HealthCheckGracePeriod: "300"
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfiguration
      LoadBalancerNames:
        - !Ref ELB
      MaxSize: !Ref MAXSIZE
      MinSize: !Ref MINSIZE
      VPCZoneIdentifier:
        - !Ref Subnet
  LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX] # Dynamic mapping + Pseudo Parameter
      InstanceType: !FindInMap [InstanceSize, !Ref ENVIRONMENT, EC2]
      KeyName: !Ref KEYPAIR
      SecurityGroups:
        - !Ref SG
      UserData:
        "Fn::Base64": 
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap
            yum install httpd24 -y
            yum update -y
            chkconfig httpd on
            service httpd start
            cd /var/www/html
            echo "RewriteEngine On" > .htaccess
            echo "RewriteCond %{HTTP:X-Forwarded-Proto} !https" >> .htaccess
            echo "RewriteRule ^.*$ https://%{SERVER_NAME}%{REQUEST_URI}" >> .htaccess 
            cd /etc/httpd/conf
            sed -i '151s/AllowOverride None/AllowOverride All/' httpd.conf
            service httpd restart
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --configsets webapp --region ${AWS::Region}
            cd /var/www/html
            chmod +644 index.html
            curl -s "http://127.0.0.1/index.html" | grep "https://127.0.0.1/index.html" -i -o && cat index.html | grep -f test.pattern -o
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          webapp:
            - "configure_cfn"
            - "config_webapp"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --configsets webapp --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        config_webapp:
          sources:
            /var/www/html: !Join ["",[!ImportValue sharedinf-appbucket, "/App", !Ref APPVERSION, ".zip"]]
          files:
            /var/www/html/test.pattern.zip:
              source: !Join ["",[!ImportValue sharedinf-appbucket, "/Test", !Ref APPVERSION, ".zip"]]
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            unzippattern:
              cwd: "/var/www/html"
              command: "unzip -o test.pattern.zip"       
  ELB:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      CrossZone: true
      Listeners:
        -
          InstancePort: "80"
          InstanceProtocol: HTTP
          LoadBalancerPort: "80"
          Protocol: HTTP
        -
          InstancePort: "80"
          InstanceProtocol: HTTP
          LoadBalancerPort: "443"
          Protocol: HTTPS
          SSLCertificateId: !Ref ACMCERTIFICATE
      Subnets:
        - !Ref Subnet
      SecurityGroups:
        - !Ref SG
  SG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join ["", ["Stack ", !Ref "AWS::StackId", " Application V", !Ref APPVERSION, " - ", !Ref ENVIRONMENT]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: "80"
          FromPort: "80"
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: "443"
          FromPort: "443"
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: "22"
          FromPort: "22"
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: "-1"
          IpProtocol: "-1"
  ScalingUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: 1   
  CPUHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 90
      AlarmDescription: 'Alarm if CPU load is high.'
      Period: 300
      AlarmActions:
      - !Ref ScalingUpPolicy
      Namespace: 'AWS/EC2'
      Dimensions:
      - Name: !Join ["", ["AWS::StackName", CPUHighAlarm]]
        Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization  
  ScalingDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: -1
  CPULowAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 10
      AlarmDescription: 'Alarm if CPU load is low.'
      Period: 300
      AlarmActions:
      - !Ref ScalingDownPolicy
      Namespace: 'AWS/EC2'
      Dimensions:
      - Name: !Join ["", ["AWS::StackName", CPULowAlarm]]
        Value: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
Outputs:
  approot:
    Description: Access URL for appsite
    Value: !Join ["", ["http://", !GetAtt ELB.DNSName, "/index.html"]]
  
